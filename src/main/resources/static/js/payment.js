// L·∫•y d·ªØ li·ªáu t·ª´ sessionStorage
const bookingDataFromSession = JSON.parse(sessionStorage.getItem('bookingData') || '{}');
console.log("SessionStorage:", bookingDataFromSession);

// Tr√≠ch xu·∫•t d·ªØ li·ªáu c·∫ßn thi·∫øt t·ª´ bookingData
const movieId = bookingDataFromSession.movieId || '';
const showDateId = bookingDataFromSession.showDateId || '';
const scheduleId = bookingDataFromSession.scheduleId || '';

let priceState = {
    originalPrice: 0,       // Gi√° g·ªëc khi ch∆∞a c√≥ khuy·∫øn m√£i n√†o
    currentPrice: 0,        // Gi√° hi·ªán t·∫°i sau khi √°p d·ª•ng c√°c khuy·∫øn m√£i
    voucherDiscount: 0,     // S·ªë ti·ªÅn gi·∫£m gi√° t·ª´ voucher
    pointsDiscount: 0       // S·ªë ti·ªÅn gi·∫£m gi√° t·ª´ ƒëi·ªÉm
};

// Alert System Class
class AlertSystem {
    constructor() {
        this.container = document.getElementById('alertContainer');
        this.alertCount = 0;
    }

    show(message, type = 'info', duration = 5000) {
        const alertId = `alert-${++this.alertCount}`;
        const icons = {
            success: '‚úÖ',
            danger: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };

        const alertElement = document.createElement('div');
        alertElement.id = alertId;
        alertElement.className = `alert alert-${type}`;
        alertElement.innerHTML = `
            <span class="alert-icon">${icons[type] || icons.info}</span>
            <span class="alert-message">${message}</span>
            <button class="alert-close" onclick="alertSystem.close('${alertId}')">&times;</button>
        `;

        this.container.appendChild(alertElement);

        setTimeout(() => {
            alertElement.classList.add('show');
        }, 100);

        if (duration > 0) {
            setTimeout(() => {
                this.close(alertId);
            }, duration);
        }

        return alertId;
    }

    close(alertId) {
        const alertElement = document.getElementById(alertId);
        if (alertElement) {
            alertElement.classList.remove('show');
            setTimeout(() => {
                if (alertElement.parentNode) {
                    alertElement.parentNode.removeChild(alertElement);
                }
            }, 300);
        }
    }

    success(message, duration = 5000) { return this.show(message, 'success', duration); }
    danger(message, duration = 5000) { return this.show(message, 'danger', duration); }
    warning(message, duration = 5000) { return this.show(message, 'warning', duration); }
    info(message, duration = 5000) { return this.show(message, 'info', duration); }
}

// Kh·ªüi t·∫°o h·ªá th·ªëng th√¥ng b√°o
const alertSystem = new AlertSystem();

// Bi·∫øn ƒë·∫øm th·ªùi gian thanh to√°n
const TOTAL_PAYMENT_TIME = 10 * 60; // 10 ph√∫t
const navEntry = performance.getEntriesByType('navigation')[0];
const isReload = navEntry ? navEntry.type === 'reload' : performance.navigation.type === 1;

if (!isReload) {
    // üëâ N·∫øu l√† truy c·∫≠p m·ªõi ho·∫∑c back ‚Üí reset timer
    localStorage.setItem('paymentStartTime', Date.now());
}

let startTime = localStorage.getItem('paymentStartTime');
if (!startTime) {
    startTime = Date.now();
    localStorage.setItem('paymentStartTime', startTime);
} else {
    startTime = parseInt(startTime);
}
// H√†m c·∫≠p nh·∫≠t b·ªô ƒë·∫øm th·ªùi gian
function updatePaymentTimer() {
    const now = Date.now();
    const elapsedTime = Math.floor((now - startTime) / 1000); // s·ªë gi√¢y ƒë√£ tr√¥i qua
    const timeLeft = TOTAL_PAYMENT_TIME - elapsedTime;

    const paymentTimer = document.getElementById('paymentTimer');
    if (timeLeft <= 0) {
        if (paymentTimer) {
            paymentTimer.textContent = "00:00";
        }
        alertSystem.danger('H·∫øt th·ªùi gian thanh to√°n! Vui l√≤ng ƒë·∫∑t v√© l·∫°i.', 10000);
        setTimeout(() => {
            localStorage.removeItem('paymentStartTime');
            window.location.href = '/';
        }, 2000);
        return
    }
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    if (paymentTimer) {
        paymentTimer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }


    // Th√¥ng b√°o c·∫£nh b√°o
    if (timeLeft === 300) {
        alertSystem.warning('C√≤n 5 ph√∫t ƒë·ªÉ ho√†n t·∫•t thanh to√°n!', 5000);
    }
    if (timeLeft === 60) {
        alertSystem.danger('Ch·ªâ c√≤n 1 ph√∫t! Vui l√≤ng ho√†n t·∫•t ngay!', 10000);
    }
}

// H√†m l·∫•y th√¥ng tin phim t·ª´ API
function fetchMovieDetails() {
    fetch(`/api/booking/details?movieId=${movieId}&showDateId=${showDateId}&scheduleId=${scheduleId}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log('Movie details:', data);
            updateMovieInfo(data);
        })
        .catch(error => {
            console.error('Error fetching movie details:', error);
            alertSystem.danger('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin phim. Vui l√≤ng th·ª≠ l·∫°i sau.', 5000);
        });
}

// H√†m c·∫≠p nh·∫≠t th√¥ng tin phim
function updateMovieInfo(data) {
    // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ phim
    const movieTitle = document.getElementById('movie-title');
    if (movieTitle && data.movieName) {
        movieTitle.textContent = data.movieName;
        // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ trang
        document.title = `Thanh to√°n: ${data.movieName} - FCine`;
    }

    // C·∫≠p nh·∫≠t poster phim
    const moviePoster = document.getElementById('movie-poster-img');
    if (moviePoster && data.posterUrl) {
        moviePoster.src = data.posterUrl;
        moviePoster.alt = data.movieName || 'Movie Poster';
    }

    // C·∫≠p nh·∫≠t th√¥ng tin meta v·ªõi icon
    const movieShowtime = document.querySelector('#movie-showtime span');
    const movieRoom = document.querySelector('#movie-room span');
    const movieDuration = document.querySelector('#movie-duration span');

    if (movieShowtime && data.showDate && data.startTime) {
        movieShowtime.textContent = `${formatDate(data.showDate)} - ${data.startTime}`;
    }

    if (movieRoom && data.roomName) {
        movieRoom.textContent = `${data.roomName}`;
    }

    if (movieDuration && data.duration) {
        movieDuration.textContent = `${data.duration} ph√∫t - ${data.movieFormat || '2D'}`;
    }

    // C·∫≠p nh·∫≠t l·∫°i booking details v·ªõi d·ªØ li·ªáu m·ªõi
    updateBookingInfoFromAPI(data);
}

// H√†m c·∫≠p nh·∫≠t ƒëi·ªÉm ng∆∞·ªùi d√πng
function fetchUserScore() {
    // Gi·∫£ s·ª≠ c√≥ m·ªôt API ƒë·ªÉ l·∫•y ƒëi·ªÉm ng∆∞·ªùi d√πng
    fetch('/api/booking/points')
        .then(response => {
            if (!response.ok) {
                throw new Error('Kh√¥ng th·ªÉ l·∫•y ƒëi·ªÉm ng∆∞·ªùi d√πng');
            }
            return response.json();
        })
        .then(data => {
            console.log('User score:', data);
            
            // L∆∞u t·ªïng ƒëi·ªÉm t·ª´ server v√†o sessionStorage
            bookingDataFromSession.userScore = data.point || 0;
            sessionStorage.setItem('bookingData', JSON.stringify(bookingDataFromSession));

            // Hi·ªÉn th·ªã ƒëi·ªÉm ng∆∞·ªùi d√πng CH·ªà KHI ch∆∞a s·ª≠ d·ª•ng ƒëi·ªÉm n√†o
            if (!bookingDataFromSession.usedPoints || bookingDataFromSession.usedPoints <= 0) {
                updateUserPointsDisplay(data.point || 0);
            }

            // T√≠nh v√† hi·ªÉn th·ªã ƒëi·ªÉm t·ªëi ƒëa c√≥ th·ªÉ s·ª≠ d·ª•ng
            updateMaxUsablePoints(data.point || 0);
        })
        .catch(error => {
            console.error('Error fetching user score:', error);
            alertSystem.danger(`L·ªói l·∫•y ƒëi·ªÉm ng∆∞·ªùi d√πng: ${error.message}`, 5000);
        });
}


// H√†m c·∫≠p nh·∫≠t booking details t·ª´ API
function updateBookingInfoFromAPI(data) {
    // C·∫≠p nh·∫≠t ng√†y & gi·ªù chi·∫øu
    const showtimeInfo = document.getElementById('showtime-info');
    if (showtimeInfo && data.showDate && data.startTime) {
        showtimeInfo.textContent = `${formatDate(data.showDate)} - ${data.startTime}`;
    }

    // C·∫≠p nh·∫≠t ph√≤ng chi·∫øu
    const roomInfo = document.getElementById('room-info');
    if (roomInfo && data.roomName) {
        roomInfo.textContent = `${data.roomName} - ${data.movieFormat || '2D'}`;
    }
}

// H√†m hi·ªÉn th·ªã chi ti·∫øt v√© ƒë√£ ƒë·∫∑t
function displayBookingDetails() {
    // C·∫≠p nh·∫≠t th√¥ng tin chi ti·∫øt ƒë·∫∑t v√©
    updateBookingInfo();

    // Hi·ªÉn th·ªã th√¥ng tin gh·∫ø
    if (bookingDataFromSession.seats && bookingDataFromSession.seats.length > 0) {
        const seatsDisplay = document.getElementById('selected-seats');
        if (seatsDisplay) {
            seatsDisplay.innerHTML = '';

            bookingDataFromSession.seats.forEach(seat => {
                const seatBadge = document.createElement('div');
                seatBadge.className = seat.type === 'VIP' ? 'seat-badge vip' : 'seat-badge';
                seatBadge.textContent = seat.seatName;
                seatsDisplay.appendChild(seatBadge);
            });
        }
    }

    // Hi·ªÉn th·ªã th√¥ng tin combo
    if (bookingDataFromSession.combos && bookingDataFromSession.combos.length > 0) {
        const comboSection = document.getElementById('combo-info-section');
        const comboDisplay = document.getElementById('selected-combos');

        if (comboSection && comboDisplay) {
            comboSection.style.display = '';
            comboDisplay.innerHTML = '';

            bookingDataFromSession.combos.forEach(combo => {
                const comboBadge = document.createElement('div');
                comboBadge.className = 'combo-badge';
                comboBadge.textContent = `${combo.comboName} x${combo.quantity}`;
                comboDisplay.appendChild(comboBadge);
            });
        }
    }

    updatePriceSummary();
}

// H√†m c·∫≠p nh·∫≠t th√¥ng tin booking details
function updateBookingInfo() {
    // C·∫≠p nh·∫≠t ng√†y & gi·ªù chi·∫øu
    const showtimeInfo = document.getElementById('showtime-info');
    if (showtimeInfo && bookingDataFromSession.showDate && bookingDataFromSession.startTime) {
        showtimeInfo.textContent = `${formatDate(bookingDataFromSession.showDate)} - ${bookingDataFromSession.startTime}`;
    }

    // C·∫≠p nh·∫≠t ph√≤ng chi·∫øu
    const roomInfo = document.getElementById('room-info');
    if (roomInfo && bookingDataFromSession.roomName) {
        roomInfo.textContent = `${bookingDataFromSession.roomName} - ${bookingDataFromSession.movieFormat || '2D'}`;
    }

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gh·∫ø
    const seatCount = document.getElementById('seat-count');
    if (seatCount && bookingDataFromSession.seats) {
        seatCount.textContent = `${bookingDataFromSession.seats.length} gh·∫ø`;
    }

    // Fallback: N·∫øu kh√¥ng c√≥ th√¥ng tin t·ª´ API, s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ session
    if (bookingDataFromSession.movieName) {
        const movieTitle = document.getElementById('movie-title');
        if (movieTitle && !movieTitle.textContent) {
            movieTitle.textContent = bookingDataFromSession.movieName;
        }
    }

    if (bookingDataFromSession.posterUrl) {
        const moviePoster = document.getElementById('movie-poster-img');
        if (moviePoster && !moviePoster.src) {
            moviePoster.src = bookingDataFromSession.posterUrl;
            moviePoster.alt = bookingDataFromSession.movieName || 'Movie Poster';
        }
    }
}

// H√†m c·∫≠p nh·∫≠t t·ªïng gi√°
function updatePriceSummary() {
    // C·∫≠p nh·∫≠t gi√° v√©
    const seatPrice = document.getElementById('seat-price');
    if (seatPrice) {
        const totalSeatPrice = bookingDataFromSession.ticketPrice || 0;
        seatPrice.textContent = `${totalSeatPrice.toLocaleString('vi-VN')}ƒë`;
    }

    // C·∫≠p nh·∫≠t gi√° combo
    const comboPrice = document.getElementById('combo-price');
    if (comboPrice) {
        const totalComboPrice = bookingDataFromSession.totalComboPrice || 0;
        comboPrice.textContent = `${totalComboPrice.toLocaleString('vi-VN')}ƒë`;
        // ·∫®n d√≤ng combo n·∫øu kh√¥ng c√≥ combo
        if (totalComboPrice === 0 && (!bookingDataFromSession.combos || bookingDataFromSession.combos.length === 0)) {
            comboPrice.closest('.price-item').style.display = 'none';
        }
    }

    // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
    const totalAmount = document.getElementById('totalAmount');
    if (totalAmount) {
        const grandTotal = priceState.currentPrice || bookingDataFromSession.totalPrice || 0;
        totalAmount.textContent = `${grandTotal.toLocaleString('vi-VN')}ƒë`;
    }
}

// ƒê·ªãnh d·∫°ng ng√†y th√°ng
function formatDate(dateString) {
    if (!dateString) return '';

    const date = new Date(dateString);
    const dayOfWeek = ['Ch·ªß nh·∫≠t', 'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7'];
    const day = date.getDate();
    const month = date.getMonth() + 1;
    const year = date.getFullYear();

    return `${dayOfWeek[date.getDay()]}, ${day}/${month}/${year}`;
}

// X·ª≠ l√Ω thanh to√°n
function processPayment() {
    // Ki·ªÉm tra ph∆∞∆°ng th·ª©c thanh to√°n ƒë∆∞·ª£c ch·ªçn
    const selectedMethod = document.querySelector('.payment-option.active');
    const paymentMethod = selectedMethod.getAttribute('data-method');

    const loadingOverlay = document.getElementById('loadingOverlay');
    const loadingText = document.getElementById('loadingText');
    const loadingSubtext = document.getElementById('loadingSubtext');

    // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang t·∫£i
    if (loadingOverlay) loadingOverlay.style.display = 'flex';

    if (paymentMethod === 'MOMO') {
        if (loadingText) loadingText.textContent = 'ƒêang k·∫øt n·ªëi v·ªõi MoMo...';
        if (loadingSubtext) loadingSubtext.textContent = 'Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...';
    } else if (paymentMethod === 'CASH') {
        if (loadingText) loadingText.textContent = 'ƒêang x√°c nh·∫≠n ƒë·∫∑t v√©...';
        if (loadingSubtext) loadingSubtext.textContent = 'Vui l√≤ng thanh to√°n t·∫°i qu·∫ßy v√©';
    }

    // Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng seats ƒë·ªÉ ph√π h·ª£p v·ªõi API
    const seatsIds = bookingDataFromSession.seats.map(seat => {
        // Ki·ªÉm tra xem seat.seatId c√≥ t·ªìn t·∫°i kh√¥ng
        if (!seat.seatId && seat.seatId !== 0) {
            // N·∫øu kh√¥ng c√≥ seatId, th·ª≠ l·∫•y t·ª´ ƒë·ªãnh d·∫°ng kh√°c (c√≥ th·ªÉ l√† t·ª´ c·∫•u tr√∫c c≈©)
            return null;
        }

        // N·∫øu seat.seatId l√† chu·ªói ch·ª©a s·ªë, chuy·ªÉn v·ªÅ s·ªë
        if (typeof seat.seatId === 'string' && !isNaN(seat.seatId)) {
            return parseInt(seat.seatId);
        }
        // N·∫øu seat.seatId ƒë√£ l√† s·ªë, gi·ªØ nguy√™n
        else if (typeof seat.seatId === 'number') {
            return seat.seatId;
        }
        // Tr∆∞·ªùng h·ª£p kh√°c, tr·∫£ v·ªÅ null
        return null;
    }).filter(id => id !== null); // L·ªçc b·ªè c√°c gi√° tr·ªã null

    // Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng combos
    const combos = [];
    if (bookingDataFromSession.combos && Array.isArray(bookingDataFromSession.combos)) {
        bookingDataFromSession.combos.forEach(combo => {
            if (combo && combo.quantity > 0 && combo.comboId) {
                combos.push({
                    comboId: typeof combo.comboId === 'string' && !isNaN(combo.comboId)
                        ? parseInt(combo.comboId)
                        : combo.comboId,
                    quantity: combo.quantity
                });
            }
        });
    }

    // L·∫•y m√£ khuy·∫øn m√£i (n·∫øu c√≥)
    const promoCodeInput = document.getElementById('promoCode');
    let promotionId = null;

    if (bookingDataFromSession.promotionId) {
        promotionId = bookingDataFromSession.promotionId;
    }// N·∫øu kh√¥ng c√≥ trong session, ki·ªÉm tra n·∫øu input ƒë√£ disabled (ƒë√£ √°p d·ª•ng m√£)
    else if (promoCodeInput && promoCodeInput.disabled && promoCodeInput.value) {
        // Trong tr∆∞·ªùng h·ª£p n√†y, ch√∫ng ta ch·ªâ c√≥ m√£ code, kh√¥ng c√≥ ID
        // C·∫ßn ph·∫£i l·∫•y ID b·∫±ng c√°ch g·ªçi API validate
        // ƒê√¢y l√† m·ªôt c√°ch kh√°c, c√≥ th·ªÉ b·∫°n mu·ªën b·ªè qua ph·∫ßn n√†y n·∫øu ƒë√£ x·ª≠ l√Ω ·ªü tr√™n
        promotionId = null;
    }

    // L·∫•y ƒëi·ªÉm ƒë√£ s·ª≠ d·ª•ng (n·∫øu t√≠nh nƒÉng n√†y ƒë∆∞·ª£c h·ªó tr·ª£)
    const usedPoints = bookingDataFromSession.usedPoints || 0;

    // T·ªïng gi√° cu·ªëi c√πng
    let totalPrice = 0;
    try {
        // Th·ª≠ l·∫•y t·ª´ ph·∫ßn t·ª≠ DOM
        const totalPriceText = document.getElementById('totalAmount')?.textContent || '';
        totalPrice = parseInt(totalPriceText.replace(/[^\d]/g, '') || '0');
    } catch (error) {
        console.error('Error parsing total price from DOM:', error);
    }

    // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c t·ª´ DOM, th·ª≠ l·∫•y t·ª´ bookingData
    if (!totalPrice) {
        totalPrice = parseInt(bookingDataFromSession.totalPrice || 0);
    }

    // ƒê·∫£m b·∫£o movieId, showDateId, scheduleId l√† s·ªë n·∫øu c√≥ th·ªÉ
    const movieIdValue = typeof movieId === 'string' && !isNaN(movieId) ? parseInt(movieId) : movieId;
    const showDateIdValue = typeof showDateId === 'string' && !isNaN(showDateId) ? parseInt(showDateId) : showDateId;
    const scheduleIdValue = typeof scheduleId === 'string' && !isNaN(scheduleId) ? parseInt(scheduleId) : scheduleId;
    const roomInfo = document.getElementById('room-info');
    console.log('üöÄ ~ processPayment ~ roomInfo:', roomInfo)

    // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n API
    const requestData = {
        movieId: movieIdValue,
        showDateId: showDateIdValue,
        scheduleId: scheduleIdValue,
        seatsIds: seatsIds,
        usedPoints: usedPoints,
        combos: combos,
        paymentMethod: paymentMethod,
        totalPrice: totalPrice,
        promotionId: promotionId
    };

    console.log("Sending booking data:", requestData);

    // Ki·ªÉm tra d·ªØ li·ªáu JSON tr∆∞·ªõc khi g·ª≠i ƒëi
    try {
        // Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ th·ªÉ serialize th√†nh JSON h·ª£p l·ªá kh√¥ng
        const testJson = JSON.stringify(requestData);
        console.log("Validated JSON data:", testJson);
    } catch (error) {
        console.error("Invalid JSON data:", error);
        alertSystem.danger(`L·ªói d·ªØ li·ªáu: ${error.message}`, 5000);
        if (loadingOverlay) loadingOverlay.style.display = 'none';
        return; // D·ª´ng h√†m n·∫øu d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
    }

    // G·ª≠i request ƒë·∫∑t v√© ƒë·∫øn server
    fetch('/api/booking/create', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
    })
        .then(response => {
            if (!response.ok) {
                return response.text().then(text => {
                    throw new Error(`Server responded with status ${response.status}: ${text}`);
                });
            }
            return response.json();
        })
        .then(data => {
            console.log("API response:", data);

            // API tr·∫£ v·ªÅ {payUrl: "..."} khi l√† thanh to√°n MoMo
            if (data.payUrl) {
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                alertSystem.success('ƒê·∫∑t v√© th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n...', 2000);

                // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn URL thanh to√°n sau 2 gi√¢y
                setTimeout(() => {
                    window.location.href = data.payUrl;
                }, 2000);
            } else {
                // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                alertSystem.success('ƒê·∫∑t v√© th√†nh c√¥ng! B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang x√°c nh·∫≠n.', 2000);

                // L∆∞u m√£ ƒë·∫∑t v√© t·ª´ response n·∫øu c√≥
                const bookingId = data.bookingId || data.id || '';
                console.log("Booking ID:", bookingId);
                // X√≥a d·ªØ li·ªáu booking trong sessionStorage
                setTimeout(() => {
                    sessionStorage.removeItem('bookingData');
                    localStorage.removeItem('paymentStartTime');
                    localStorage.removeItem('StartTime');

                    window.location.href = `/booking/confirmation/${bookingId}`;
                }, 2000);
            }
        })
        .catch(error => {
            console.error('Payment error:', error);
            alertSystem.danger(`L·ªói thanh to√°n: ${error.message}`, 5000);
        })
        .finally(() => {
            // Lu√¥n ·∫©n overlay loading khi ho√†n t·∫•t
            if (loadingOverlay) loadingOverlay.style.display = 'none';
        });
}

// Hi·ªáu ·ª©ng ƒë·ªïi m√†u khi click n√∫t MoMo
function initMomoButtonEffect() {
    const momoBtn = document.getElementById('confirmPaymentBtn');
    if (momoBtn) {
        momoBtn.addEventListener('mousedown', function () {
            momoBtn.classList.add('active');
        });

        momoBtn.addEventListener('mouseup', function () {
            momoBtn.classList.remove('active');
        });

        momoBtn.addEventListener('mouseleave', function () {
            momoBtn.classList.remove('active');
        });
    }
}

// X·ª≠ l√Ω khuy·∫øn m√£i
function initPromoCode() {
    // Th√™m khai b√°o bi·∫øn ·ªü ƒë√¢y
    const promoCodeInput = document.getElementById('promoCode');
    const applyPromoBtn = document.getElementById('applyPromoBtn');
    
    if (applyPromoBtn) {
        applyPromoBtn.addEventListener('click', function() {
            const promoCode = document.getElementById('promoCode').value;
            
            if (!promoCode) {
                alertSystem.warning('Vui l√≤ng nh·∫≠p m√£ khuy·∫øn m√£i!', 3000);
                return;
            }
            
            // L·∫•y t·ªïng gi√° hi·ªán t·∫°i
            let currentTotal = priceState.originalPrice || (bookingDataFromSession.ticketPrice + bookingDataFromSession.totalComboPrice) || 0;           
            
            // Hi·ªÉn th·ªã loading
            applyPromoBtn.disabled = true;
            applyPromoBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> ƒêang ki·ªÉm tra...';
            
            // G·ªçi API ƒë·ªÉ √°p d·ª•ng m√£ khuy·∫øn m√£i
            fetch(`/api/booking/apply-promotion`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    promotionCode: promoCode,
                    originalAmount: currentTotal
                })
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.error || 'Kh√¥ng th·ªÉ √°p d·ª•ng m√£ khuy·∫øn m√£i');
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Promotion applied:', data);
                
                // L∆∞u th√¥ng tin gi·∫£m gi√° t·ª´ voucher
                priceState.voucherDiscount = data.discountAmount;

                // T√≠nh to√°n l·∫°i gi√° cu·ªëi c√πng = gi√° g·ªëc - gi·∫£m gi√° voucher - gi·∫£m gi√° ƒëi·ªÉm 
                priceState.currentPrice = priceState.originalPrice - priceState.voucherDiscount - priceState.pointsDiscount;

                // C·∫≠p nh·∫≠t gi√° hi·ªÉn th·ªã
                document.getElementById('totalAmount').textContent = `${priceState.currentPrice.toLocaleString('vi-VN')}ƒë`;

                // Th√™m d√≤ng gi·∫£m gi√°
                const priceBreakdown = document.querySelector('.price-breakdown');
                
                // Ki·ªÉm tra xem ƒë√£ c√≥ d√≤ng gi·∫£m gi√° ch∆∞a
                let discountItem = document.querySelector('.discount-item');
                
                if (!discountItem) {
                    discountItem = document.createElement('div');
                    discountItem.className = 'price-item discount-item';
                    
                    // FIX: C√°ch an to√†n ƒë·ªÉ ch√®n ph·∫ßn t·ª≠ v√†o ƒë√∫ng v·ªã tr√≠
                    const totalSection = document.querySelector('.total-section') || document.querySelector('.total-amount');
                    
                    // Ch·ªâ ch√®n tr∆∞·ªõc totalSection n·∫øu n√≥ l√† con c·ªßa priceBreakdown
                    if (totalSection && priceBreakdown && priceBreakdown.contains(totalSection)) {
                        priceBreakdown.insertBefore(discountItem, totalSection);
                    } else {
                        // N·∫øu kh√¥ng t√¨m th·∫•y totalSection ho·∫∑c n√≥ kh√¥ng ph·∫£i con c·ªßa priceBreakdown,
                        // th√™m v√†o cu·ªëi c·ªßa priceBreakdown
                        priceBreakdown.appendChild(discountItem);
                    }
                }
                
                discountItem.innerHTML = `
                    <span style="color: #22c55e;">
                        <i class="bi bi-tag-fill"></i> 
                        Gi·∫£m gi√° (${data.title || promoCode}: <strong>${promoCode}</strong>)
                    </span>
                    <span style="color: #22c55e;">-${data.discountAmount.toLocaleString('vi-VN')}ƒë</span>
                `;
                // Th√™m style cho ph·∫ßn t·ª≠ hi·ªÉn th·ªã
                discountItem.style.cssText = `
                    background: rgba(34, 197, 94, 0.1); 
                    border-radius: 8px; 
                    padding: 8px 12px; 
                    margin: 10px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    animation: fadeIn 0.3s;
                `;

                // L∆∞u promotionId v√† promotionCode v√†o bookingDataFromSession
                bookingDataFromSession.promotionId = data.promotionId;
                bookingDataFromSession.promotionCode = promoCode;
                bookingDataFromSession.voucherDiscount = data.discountAmount;
                sessionStorage.setItem('bookingData', JSON.stringify(bookingDataFromSession));
                
                console.log('Updated booking data with promotion:', bookingDataFromSession);
                // L∆∞u th√¥ng tin gi√° g·ªëc ƒë·ªÉ c√≥ th·ªÉ kh√¥i ph·ª•c khi h·ªßy m√£
                bookingDataFromSession.originalPrice = priceState.originalPrice;
                
                // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
                bookingDataFromSession.totalPrice = priceState.currentPrice;

                alertSystem.success(`√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng! Gi·∫£m ${data.discountAmount.toLocaleString('vi-VN')}ƒë`, 3000);
                
                // V√¥ hi·ªáu h√≥a input v√† n√∫t √°p d·ª•ng
                promoCodeInput.disabled = true;
                
                // THAY ƒê·ªîI: ƒê·ªïi style n√∫t √°p d·ª•ng v√† v√¥ hi·ªáu h√≥a
                applyPromoBtn.disabled = true;
                applyPromoBtn.textContent = 'ƒê√£ √°p d·ª•ng';
                applyPromoBtn.classList.remove('btn-warning');
                applyPromoBtn.classList.add('btn-success');
                
                // X√≥a n√∫t h·ªßy c≈© n·∫øu c√≥
                const oldCancelBtn = document.getElementById('cancelPromoBtn');
                if (oldCancelBtn) {
                    oldCancelBtn.remove();
                }
                
                // Th√™m n√∫t h·ªßy m√£ gi·∫£m gi√°
                const cancelBtn = document.createElement('button');
                cancelBtn.className = 'btn btn-outline-danger ms-2';
                cancelBtn.id = 'cancelPromoBtn';
                cancelBtn.innerHTML = '<i class="bi bi-x-lg"></i>';
                cancelBtn.title = 'H·ªßy m√£ gi·∫£m gi√°';
                applyPromoBtn.parentNode.appendChild(cancelBtn);
                
                // X·ª≠ l√Ω s·ª± ki·ªán h·ªßy m√£ gi·∫£m gi√°
                cancelBtn.addEventListener('click', function() {
                    // X√≥a th√¥ng tin khuy·∫øn m√£i
                    delete bookingDataFromSession.promotionId;
                    delete bookingDataFromSession.promotionCode;
                    sessionStorage.setItem('bookingData', JSON.stringify(bookingDataFromSession));
                    
                    // Kh√¥i ph·ª•c gi√° ban ƒë·∫ßu
                    priceState.voucherDiscount = 0;
                    priceState.currentPrice = priceState.originalPrice - priceState.voucherDiscount - priceState.pointsDiscount;
                    document.getElementById('totalAmount').textContent = `${priceState.currentPrice.toLocaleString('vi-VN')}ƒë`;
                    bookingDataFromSession.totalPrice = priceState.currentPrice;

                    console.log('Updated TotalPrice data after cancelling promotion:', bookingDataFromSession);
                    // X√≥a d√≤ng gi·∫£m gi√°
                    if (discountItem) {
                        discountItem.remove();
                    }
                    
                    // Kh√¥i ph·ª•c tr·∫°ng th√°i ban ƒë·∫ßu
                    promoCodeInput.disabled = false;
                    promoCodeInput.value = '';
                    
                    // THAY ƒê·ªîI: Kh√¥i ph·ª•c l·∫°i n√∫t √°p d·ª•ng
                    applyPromoBtn.disabled = false;
                    applyPromoBtn.textContent = '√Åp d·ª•ng';
                    applyPromoBtn.classList.remove('btn-success');
                    applyPromoBtn.classList.add('btn-warning');
                    
                    // X√≥a n√∫t h·ªßy
                    cancelBtn.remove();
                    
                    alertSystem.info('ƒê√£ h·ªßy m√£ gi·∫£m gi√°', 2000);
                });
            })
            .catch(error => {
                console.error('Error applying promotion:', error);
                alertSystem.danger(`L·ªói: ${error.message}`, 3000);
            })
            .finally(() => {
                // Kh√¥i ph·ª•c n√∫t n·∫øu c√≥ l·ªói
                if (!document.querySelector('.discount-item')) {
                    applyPromoBtn.disabled = false;
                    applyPromoBtn.textContent = '√Åp d·ª•ng';
                }
            });
        });
    }
}

// Kh·ªüi t·∫°o x·ª≠ l√Ω ph∆∞∆°ng th·ª©c thanh to√°n
function initPaymentMethods() {
    const paymentOptions = document.querySelectorAll('.payment-option');
    const confirmBtn = document.getElementById('confirmPaymentBtn');
    const paymentIcon = document.getElementById('payment-icon');
    const paymentText = document.getElementById('payment-text');

    paymentOptions.forEach(option => {
        option.addEventListener('click', function () {
            // B·ªè ch·ªçn t·∫•t c·∫£ c√°c option kh√°c
            paymentOptions.forEach(opt => opt.classList.remove('active'));

            // Ch·ªçn option hi·ªán t·∫°i
            this.classList.add('active');

            const method = this.getAttribute('data-method');

            // C·∫≠p nh·∫≠t n√∫t thanh to√°n theo ph∆∞∆°ng th·ª©c
            if (method === 'MOMO') {
                confirmBtn.className = 'confirm-btn momo-btn';
                paymentIcon.className = 'bi bi-wallet2';
                paymentText.textContent = 'Thanh to√°n b·∫±ng MoMo';
            } else if (method === 'CASH') {
                confirmBtn.className = 'confirm-btn cash-btn';
                paymentIcon.className = 'bi bi-cash-coin';
                paymentText.textContent = 'Thanh to√°n ti·ªÅn m·∫∑t';
            }
        });
    });
}

// H√†m hi·ªÉn th·ªã ƒëi·ªÉm ng∆∞·ªùi d√πng
function updateUserPointsDisplay(points) {
    const userPointsElement = document.getElementById('userPoints');
    if (userPointsElement) {
        userPointsElement.textContent = `${points.toLocaleString('vi-VN')} ƒëi·ªÉm`;
    }
}

// H√†m t√≠nh v√† c·∫≠p nh·∫≠t ƒëi·ªÉm t·ªëi ƒëa c√≥ th·ªÉ s·ª≠ d·ª•ng
function updateMaxUsablePoints(points) {
    // L·∫•y t·ªïng ti·ªÅn hi·ªán t·∫°i
    let currentTotal = 0;
    try {
        // const totalPriceText = document.getElementById('totalAmount')?.textContent || '';
        // currentTotal = parseFloat(totalPriceText.replace(/[^\d]/g, '') || '0');
        currentTotal = priceState.currentPrice || (bookingDataFromSession.ticketPrice + bookingDataFromSession.totalComboPrice) || 0;
    } catch (error) {
        console.error('Error parsing current total:', error);
    }

    // T√≠nh s·ªë ti·ªÅn t·ªëi ƒëa c√≥ th·ªÉ gi·∫£m (30% c·ªßa t·ªïng ti·ªÅn)
    const maxDiscountAmount = Math.floor(currentTotal * 0.3);

    // T√≠nh s·ªë ƒëi·ªÉm t·ªëi ƒëa t·ª´ maxDiscountAmount (1 ƒëi·ªÉm = 10ƒë)
    const maxPointsFromDiscount = Math.floor(maxDiscountAmount / 10);

    // S·ªë ƒëi·ªÉm t·ªëi ƒëa c√≥ th·ªÉ s·ª≠ d·ª•ng = min(ƒëi·ªÉm c√≥ s·∫µn, ƒëi·ªÉm t·ª´ 30% gi√° tr·ªã ƒë∆°n h√†ng)
    const maxPoints = Math.min(points, maxPointsFromDiscount);

    // Hi·ªÉn th·ªã s·ªë ƒëi·ªÉm t·ªëi ƒëa
    const maxUsablePointsElement = document.getElementById('maxUsablePoints');
    if (maxUsablePointsElement) {
        maxUsablePointsElement.textContent = maxPoints.toLocaleString('vi-VN');
    }

    // C·∫≠p nh·∫≠t text hi·ªÉn th·ªã chi ti·∫øt
    const pointsDetailsElement = document.getElementById('pointsDetails');
    if (pointsDetailsElement && points > 0) {
        pointsDetailsElement.innerHTML = `
            <div style="margin-bottom: 5px">‚Ä¢ 1 ƒëi·ªÉm = 10ƒë</div>
            <div style="margin-bottom: 5px">‚Ä¢ T·ªëi ƒëa gi·∫£m 30% gi√° tr·ªã ƒë∆°n h√†ng (${maxDiscountAmount.toLocaleString('vi-VN')}ƒë)</div>
            <div>‚Ä¢ T·ªëi ƒëa s·ª≠ d·ª•ng <span style="color: #fbbf24; font-weight: bold">${maxPoints.toLocaleString('vi-VN')}</span> ƒëi·ªÉm cho ƒë∆°n h√†ng n√†y</div>
        `;
        pointsDetailsElement.style.display = 'block';
    } else if (pointsDetailsElement) {
        pointsDetailsElement.style.display = 'none';
    }

    // K√≠ch ho·∫°t checkbox n·∫øu c√≥ ƒëi·ªÉm
    const usePointsCheckbox = document.getElementById('usePointsCheckbox');
    if (usePointsCheckbox) {
        usePointsCheckbox.disabled = points <= 0 || maxPoints <= 0;
    }
}


// √Åp d·ª•ng ƒëi·ªÉm ng∆∞·ªùi d√πng v√†o h√≥a ƒë∆°n
function applyUserPoints() {
    const userScore = bookingDataFromSession.userScore || 0;
    if (userScore <= 0) return;

    // S·ª≠ d·ª•ng gi√° g·ªëc ƒë·ªÉ t√≠nh ƒëi·ªÉm t·ªëi ƒëa c√≥ th·ªÉ s·ª≠ d·ª•ng
    let currentTotal = priceState.originalPrice || (bookingDataFromSession.ticketPrice + bookingDataFromSession.totalComboPrice) || 0;

    // T√≠nh s·ªë ti·ªÅn t·ªëi ƒëa c√≥ th·ªÉ gi·∫£m (30% c·ªßa t·ªïng ti·ªÅn hi·ªán t·∫°i)
    const maxDiscountAmount = Math.floor(currentTotal * 0.3);

    // T√≠nh s·ªë ƒëi·ªÉm t·ªëi ƒëa t·ª´ maxDiscountAmount (1 ƒëi·ªÉm = 10ƒë)
    const maxPointsFromDiscount = Math.floor(maxDiscountAmount / 10);

    // S·ªë ƒëi·ªÉm th·ª±c t·∫ø s·ª≠ d·ª•ng = min(ƒëi·ªÉm c√≥ s·∫µn, ƒëi·ªÉm t·ª´ 30% gi√° tr·ªã)
    const maxPoints = Math.min(userScore, maxPointsFromDiscount);
    const discountAmount = maxPoints * 10;

    if (maxPoints <= 0 || discountAmount <= 0) {
        alertSystem.warning('Kh√¥ng th·ªÉ s·ª≠ d·ª•ng ƒëi·ªÉm. S·ªë ƒëi·ªÉm kh√¥ng ƒë·ªß ho·∫∑c ƒë√£ ƒë·∫°t gi·ªõi h·∫°n gi·∫£m gi√°.', 3000);
        return;
    }

    // L∆∞u l·∫°i gi·∫£m gi√° t·ª´ ƒëi·ªÉm
    priceState.pointsDiscount = discountAmount;

    // T√≠nh l·∫°i gi√° cu·ªëi c√πng
    priceState.currentPrice = priceState.originalPrice - priceState.pointsDiscount - priceState.voucherDiscount;

    // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn v√†o session
    bookingDataFromSession.usedPoints = maxPoints;
    // bookingDataFromSession.totalPrice = priceState.currentPrice;
    sessionStorage.setItem('bookingData', JSON.stringify(bookingDataFromSession));

    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã
    document.getElementById('totalAmount').textContent = `${priceState.currentPrice.toLocaleString('vi-VN')}ƒë`;

    // Th√™m d√≤ng gi·∫£m gi√° t·ª´ ƒëi·ªÉm
    addPointsDiscountRow(discountAmount, maxPoints);

    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng v·ªõi th√¥ng tin chi ti·∫øt
    alertSystem.success(`ƒê√£ s·ª≠ d·ª•ng ${maxPoints.toLocaleString('vi-VN')} ƒëi·ªÉm ƒë·ªÉ gi·∫£m ${discountAmount.toLocaleString('vi-VN')}ƒë`, 5000);
}

// Th√™m d√≤ng gi·∫£m gi√° t·ª´ ƒëi·ªÉm
function addPointsDiscountRow(discountAmount, usedPoints) {
    const priceBreakdown = document.querySelector('.price-breakdown');

    // Ki·ªÉm tra xem ƒë√£ c√≥ d√≤ng gi·∫£m gi√° t·ª´ ƒëi·ªÉm ch∆∞a
    let pointsDiscountItem = document.querySelector('.points-discount-item');

    if (!pointsDiscountItem) {
        pointsDiscountItem = document.createElement('div');
        pointsDiscountItem.className = 'price-item points-discount-item';

        // Ch√®n v√†o tr∆∞·ªõc total-section
        const totalSection = document.querySelector('.total-section');

        // Ki·ªÉm tra xem totalSection c√≥ t·ªìn t·∫°i v√† c√≥ ph·∫£i l√† con c·ªßa priceBreakdown kh√¥ng
        if (totalSection && priceBreakdown && priceBreakdown.contains(totalSection)) {
            priceBreakdown.insertBefore(pointsDiscountItem, totalSection);
        } else {
            // N·∫øu kh√¥ng, th√™m v√†o cu·ªëi c·ªßa priceBreakdown
            if (priceBreakdown) {
                priceBreakdown.appendChild(pointsDiscountItem);
            }
        }
    }

    pointsDiscountItem.innerHTML = `
        <span style="color: #22c55e;">
            <i class="bi bi-star-fill"></i> 
            S·ª≠ d·ª•ng <span id="usedPoints" class="used-points-value">${usedPoints.toLocaleString('vi-VN')}</span> ƒëi·ªÉm t√≠ch l≈©y
        </span>
        <span style="color: #22c55e;" class="used-points-discount">-${discountAmount.toLocaleString('vi-VN')}ƒë</span>
    `;

    // Th√™m style cho ph·∫ßn t·ª≠ hi·ªÉn th·ªã
    pointsDiscountItem.style.cssText = `
        background: rgba(34, 197, 94, 0.1); 
        border-radius: 8px; 
        padding: 8px 12px; 
        margin: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        animation: fadeIn 0.3s;
    `;

    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã chi ti·∫øt ƒëi·ªÉm
    updatePointsDetailDisplay(usedPoints);
}

// H√†m c·∫≠p nh·∫≠t hi·ªÉn th·ªã chi ti·∫øt ƒëi·ªÉm sau khi s·ª≠ d·ª•ng
function updatePointsDetailDisplay(usedPoints) {
    const userScore = bookingDataFromSession.userScore || 0;
    const remainingPoints = userScore - usedPoints;

    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã ƒëi·ªÉm c√≤n l·∫°i
    const userPointsElement = document.getElementById('userPoints');
    if (userPointsElement) {
        // Hi·ªÉn th·ªã ƒëi·ªÉm c√≤n l·∫°i sau khi ƒë√£ s·ª≠ d·ª•ng
        userPointsElement.innerHTML = `<span>${remainingPoints.toLocaleString('vi-VN')}</span> <span style="color: #999; font-size: 0.8em;">(ƒê√£ d√πng: ${usedPoints.toLocaleString('vi-VN')})</span>`;
    }
}

// H·ªßy s·ª≠ d·ª•ng ƒëi·ªÉm
function removeUserPoints() {
    if (!bookingDataFromSession.usedPoints) return;

    // L·∫•y s·ªë ƒëi·ªÉm ƒë√£ s·ª≠ d·ª•ng ƒë·ªÉ th√¥ng b√°o
    const usedPoints = bookingDataFromSession.usedPoints;

    // ƒê·∫∑t l·∫°i gi·∫£m gi√° ƒëi·ªÉm v·ªÅ 0
    priceState.pointsDiscount = 0;

    // T√≠nh l·∫°i gi√° cu·ªëi c√πng
    priceState.currentPrice = priceState.originalPrice - priceState.voucherDiscount - priceState.pointsDiscount;

    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã
    document.getElementById('totalAmount').textContent = `${priceState.currentPrice.toLocaleString('vi-VN')}ƒë`;

    // X√≥a d√≤ng gi·∫£m gi√° t·ª´ ƒëi·ªÉm
    const pointsDiscountItem = document.querySelector('.points-discount-item');
    if (pointsDiscountItem) {
        pointsDiscountItem.remove();
    }

    // X√≥a th√¥ng tin ƒëi·ªÉm ƒë√£ s·ª≠ d·ª•ng
    delete bookingDataFromSession.usedPoints;
    sessionStorage.setItem('bookingData', JSON.stringify(bookingDataFromSession));

    // Kh√¥i ph·ª•c hi·ªÉn th·ªã ƒëi·ªÉm ban ƒë·∫ßu
    const userScore = bookingDataFromSession.userScore || 0;
    const userPointsElement = document.getElementById('userPoints');
    if (userPointsElement) {
        userPointsElement.textContent = `${userScore.toLocaleString('vi-VN')} ƒëi·ªÉm`;
    }

    alertSystem.info(`ƒê√£ h·ªßy s·ª≠ d·ª•ng ${usedPoints.toLocaleString('vi-VN')} ƒëi·ªÉm t√≠ch l≈©y`, 2000);
}

// Kh·ªüi t·∫°o x·ª≠ l√Ω s·ª≠ d·ª•ng ƒëi·ªÉm
function initPointsUsage() {
    const usePointsCheckbox = document.getElementById('usePointsCheckbox');

    if (usePointsCheckbox) {
        usePointsCheckbox.addEventListener('change', function () {
            if (this.checked) {
                applyUserPoints();
            } else {
                removeUserPoints();
            }
        });
    }
}

// H√†m kh√¥i ph·ª•c tr·∫°ng th√°i khi reload trang
function restoreStateFromSession() {
    // 1. Kh√¥i ph·ª•c gi√° ban ƒë·∫ßu
    if (bookingDataFromSession.originalPrice) {
        priceState.originalPrice = bookingDataFromSession.originalPrice;
    } else {
        // N·∫øu kh√¥ng c√≥ originalPrice, l·∫•y t·ª´ t·ªïng gi√° v√© v√† combo
        priceState.originalPrice = (bookingDataFromSession.ticketPrice || 0) + 
                                  (bookingDataFromSession.totalComboPrice || 0);
    }
    
    // 2. Kh√¥i ph·ª•c tr·∫°ng th√°i khuy·∫øn m√£i
    restorePromotionState();
    
    // 3. Kh√¥i ph·ª•c tr·∫°ng th√°i ƒëi·ªÉm t√≠ch l≈©y
    restorePointsState();
    
    // 4. T√≠nh l·∫°i gi√° cu·ªëi c√πng
    priceState.currentPrice = priceState.originalPrice - priceState.voucherDiscount - priceState.pointsDiscount;
    
    // 5. C·∫≠p nh·∫≠t hi·ªÉn th·ªã gi√° cu·ªëi c√πng
    const totalAmount = document.getElementById('totalAmount');
    if (totalAmount) {
        totalAmount.textContent = `${priceState.currentPrice.toLocaleString('vi-VN')}ƒë`;
    }
    
    console.log("Restored price state:", priceState);
}


// Kh√¥i ph·ª•c tr·∫°ng th√°i khuy·∫øn m√£i
function restorePromotionState() {
    const promoCodeInput = document.getElementById('promoCode');
    const applyPromoBtn = document.getElementById('applyPromoBtn');
    
    // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ promotion √°p d·ª•ng tr∆∞·ªõc ƒë√≥
    if (bookingDataFromSession.promotionId) {
        console.log("Restoring promotion state:", bookingDataFromSession.promotionId);
        
        // Th√™m code ƒë·ªÉ ki·ªÉm tra v√† x√≥a c√°c ph·∫ßn t·ª≠ c≈© n·∫øu c√≥
        const oldCancelBtn = document.getElementById('cancelPromoBtn');
        if (oldCancelBtn) {
            oldCancelBtn.remove();
        }
        
        // X√≥a d√≤ng gi·∫£m gi√° c≈© n·∫øu c√≥
        const oldDiscountItem = document.querySelector('.discount-item');
        if (oldDiscountItem) {
            oldDiscountItem.remove();
        }

        // Hi·ªÉn th·ªã m√£ khuy·∫øn m√£i ƒë√£ ƒë∆∞·ª£c l∆∞u trong input
        if (bookingDataFromSession.promotionCode) {
            promoCodeInput.value = bookingDataFromSession.promotionCode;
        } else if (bookingDataFromSession.promotionId) {
            // N·∫øu kh√¥ng c√≥ m√£ nh∆∞ng c√≥ ID, hi·ªÉn th·ªã ID l√†m m√£
            promoCodeInput.value = bookingDataFromSession.promotionId;
        }
        
        // V√¥ hi·ªáu h√≥a input v√† n√∫t √°p d·ª•ng
        promoCodeInput.disabled = true;
        applyPromoBtn.disabled = true;
        applyPromoBtn.textContent = 'ƒê√£ √°p d·ª•ng';
        applyPromoBtn.classList.remove('btn-warning');
        applyPromoBtn.classList.add('btn-success');
        
        // L·∫•y gi√° tr·ªã gi·∫£m gi√° t·ª´ session
        const discountAmount = bookingDataFromSession.voucherDiscount || 0;
        console.log("After reload restored discount amount:", discountAmount);
        priceState.voucherDiscount = discountAmount;
        
        // L·∫•y t√™n m√£ khuy·∫øn m√£i t·ª´ session n·∫øu c√≥
        let promotionTitle = bookingDataFromSession.promotionTitle || 'M√£ khuy·∫øn m√£i';
        
        if (discountAmount > 0) {
            // T·∫°o l·∫°i d√≤ng gi·∫£m gi√°
            const priceBreakdown = document.querySelector('.price-breakdown');
            if (priceBreakdown) {
                const discountItem = document.createElement('div');
                discountItem.className = 'price-item discount-item';
                
                // Ch√®n v√†o tr∆∞·ªõc total-amount
                const totalSection = document.querySelector('.total-section') || document.querySelector('.total-amount');
                
                // Ch·ªâ ch√®n tr∆∞·ªõc totalSection n·∫øu n√≥ l√† con c·ªßa priceBreakdown
                if (totalSection && priceBreakdown.contains(totalSection)) {
                    priceBreakdown.insertBefore(discountItem, totalSection);
                } else {
                    priceBreakdown.appendChild(discountItem);
                }
                
                discountItem.innerHTML = `
                    <span style="color: #22c55e;">
                        <i class="bi bi-tag-fill"></i> 
                        Gi·∫£m gi√° (${promotionTitle}: <strong>${bookingDataFromSession.promotionCode || bookingDataFromSession.promotionId}</strong>)
                    </span>
                    <span style="color: #22c55e;">-${discountAmount.toLocaleString('vi-VN')}ƒë</span>
                `;

                // Th√™m style cho ph·∫ßn t·ª≠
                discountItem.style.cssText = `
                    background: rgba(34, 197, 94, 0.1); 
                    border-radius: 8px; 
                    padding: 8px 12px; 
                    margin: 10px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    animation: fadeIn 0.3s;
                `;
            }
        }
        
        // Th√™m n√∫t h·ªßy
        const cancelBtn = document.createElement('button');
        cancelBtn.className = 'btn btn-outline-danger ms-2';
        cancelBtn.id = 'cancelPromoBtn';
        cancelBtn.innerHTML = '<i class="bi bi-x-lg"></i>';
        cancelBtn.title = 'H·ªßy m√£ gi·∫£m gi√°';
        applyPromoBtn.parentNode.appendChild(cancelBtn);
        
        // X·ª≠ l√Ω s·ª± ki·ªán h·ªßy
        cancelBtn.addEventListener('click', function() {
            // Logic h·ªßy m√£ khuy·∫øn m√£i
            delete bookingDataFromSession.promotionId;
            delete bookingDataFromSession.promotionCode;
            delete bookingDataFromSession.promotionTitle;
            delete bookingDataFromSession.voucherDiscount;
            sessionStorage.setItem('bookingData', JSON.stringify(bookingDataFromSession));
            
            // ƒê·∫∑t l·∫°i gi√° tr·ªã gi·∫£m gi√° trong priceState
            priceState.voucherDiscount = 0;
            
            // T√≠nh l·∫°i gi√° cu·ªëi c√πng
            priceState.currentPrice = priceState.originalPrice - priceState.pointsDiscount;
            document.getElementById('totalAmount').textContent = `${priceState.currentPrice.toLocaleString('vi-VN')}ƒë`;
            bookingDataFromSession.totalPrice = priceState.currentPrice;
            
            // X√≥a d√≤ng gi·∫£m gi√°
            const discountItem = document.querySelector('.discount-item');
            if (discountItem) {
                discountItem.remove();
            }
            
            // Kh√¥i ph·ª•c tr·∫°ng th√°i ban ƒë·∫ßu cho input v√† n√∫t
            promoCodeInput.disabled = false;
            promoCodeInput.value = '';
            applyPromoBtn.disabled = false;
            applyPromoBtn.textContent = '√Åp d·ª•ng';
            applyPromoBtn.classList.remove('btn-success');
            applyPromoBtn.classList.add('btn-warning');
            
            // X√≥a n√∫t h·ªßy
            cancelBtn.remove();
            
            alertSystem.info('ƒê√£ h·ªßy m√£ gi·∫£m gi√°', 2000);
        });
    }
}

// Kh√¥i ph·ª•c tr·∫°ng th√°i ƒëi·ªÉm t√≠ch l≈©y
function restorePointsState() {
    const usePointsCheckbox = document.getElementById('usePointsCheckbox');
    
    // Kh√¥i ph·ª•c tr·∫°ng th√°i s·ª≠ d·ª•ng ƒëi·ªÉm
    if (bookingDataFromSession.usedPoints && bookingDataFromSession.usedPoints > 0) {
        console.log("Restoring points state:", bookingDataFromSession.usedPoints);
        
        // L·∫•y s·ªë ƒëi·ªÉm ƒë√£ s·ª≠ d·ª•ng
        const usedPoints = bookingDataFromSession.usedPoints;
        
        // T√≠nh gi√° tr·ªã gi·∫£m gi√° t·ª´ ƒëi·ªÉm (1 ƒëi·ªÉm = 10ƒë)
        const discountAmount = usedPoints * 10;
        priceState.pointsDiscount = discountAmount;
        
        // ƒê√°nh d·∫•u checkbox l√† ƒë√£ ch·ªçn
        if (usePointsCheckbox) {
            usePointsCheckbox.checked = true;
        }
        
        // Th√™m d√≤ng gi·∫£m gi√° t·ª´ ƒëi·ªÉm
        const pointsDiscountItem = document.querySelector('.points-discount-item');
        if (!pointsDiscountItem) {
            addPointsDiscountRow(discountAmount, usedPoints);
        }
        
        // C·∫¨P NH·∫¨T TH√äM: ƒê·∫£m b·∫£o c·∫≠p nh·∫≠t hi·ªÉn th·ªã ƒëi·ªÉm c√≤n l·∫°i
        const userScore = bookingDataFromSession.userScore || 0;
        const remainingPoints = userScore - usedPoints;
        
        const userPointsElement = document.getElementById('userPoints');
        if (userPointsElement) {
            userPointsElement.innerHTML = `<span>${remainingPoints.toLocaleString('vi-VN')}</span> <span style="color: #999; font-size: 0.8em;">(ƒê√£ d√πng: ${usedPoints.toLocaleString('vi-VN')})</span>`;
        }
    }
}

// H√†m kh·ªüi t·∫°o tr·∫°ng th√°i gi√°
function initializePriceState() {
    priceState = {
        originalPrice: bookingDataFromSession.totalPrice || 0,
        currentPrice: bookingDataFromSession.totalPrice || 0,
        voucherDiscount: 0,
        pointsDiscount: 0
    };
    
    // N·∫øu ƒë√£ c√≥ th√¥ng tin t·ª´ session, kh√¥i ph·ª•c l·∫°i tr·∫°ng th√°i
    restoreStateFromSession();
}

// Kh·ªüi t·∫°o trang
document.addEventListener('DOMContentLoaded', function () {
    console.log('Payment page loaded, booking data:', bookingDataFromSession);

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫∑t v√©
    if (!bookingDataFromSession.seats || bookingDataFromSession.seats.length === 0) {
        alertSystem.danger('Kh√¥ng t√¨m th·∫•y th√¥ng tin gh·∫ø ƒë√£ ch·ªçn. Vui l√≤ng ƒë·∫∑t v√© l·∫°i!', 3000);
        setTimeout(() => {
            window.location.href = `/booking/seats?movieId=${movieId}&showDateId=${showDateId}&scheduleId=${scheduleId}`;
        }, 3000);
        return;
    }
    // Kh·ªüi t·∫°o priceState v√† kh√¥i ph·ª•c tr·∫°ng th√°i t·ª´ session
    initializePriceState();

    // L·∫•y th√¥ng tin phim
    fetchMovieDetails();

    // Hi·ªÉn th·ªã chi ti·∫øt ƒë·∫∑t v√© ngay l·∫≠p t·ª©c v·ªõi d·ªØ li·ªáu c√≥ s·∫µn
    displayBookingDetails();

    // C·∫≠p nh·∫≠t timer
    updatePaymentTimer();
    // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c th·ªùi gian
    setInterval(updatePaymentTimer, 1000);

    // Kh·ªüi t·∫°o x·ª≠ l√Ω ph∆∞∆°ng th·ª©c thanh to√°n
    initPaymentMethods();

    // Kh·ªüi t·∫°o hi·ªáu ·ª©ng cho n√∫t thanh to√°n
    initMomoButtonEffect();

    // Kh·ªüi t·∫°o x·ª≠ l√Ω m√£ khuy·∫øn m√£i
    initPromoCode();

    // L·∫•y v√† hi·ªÉn th·ªã ƒëi·ªÉm ng∆∞·ªùi d√πng
    fetchUserScore();

    // Kh·ªüi t·∫°o x·ª≠ l√Ω s·ª≠ d·ª•ng ƒëi·ªÉm
    initPointsUsage();

    // G·∫Øn s·ª± ki·ªán cho n√∫t thanh to√°n
    const confirmPaymentBtn = document.getElementById('confirmPaymentBtn');
    if (confirmPaymentBtn) {
        confirmPaymentBtn.addEventListener('click', processPayment);
    }

    // Th√¥ng b√°o ch√†o m·ª´ng
    setTimeout(() => {
        alertSystem.info('Vui l√≤ng x√°c nh·∫≠n th√¥ng tin v√† ho√†n t·∫•t thanh to√°n', 3000);
    }, 1000);
});